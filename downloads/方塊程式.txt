# NX 1872
# Journal created by Admin on Fri Jun 14 14:40:11 2024 台北標準時間

#
import math
import NXOpen
import NXOpen.Annotations
import NXOpen.Features
import NXOpen.GeometricUtilities
import NXOpen.Preferences
def main() : 

    theSession  = NXOpen.Session.GetSession()
    # ----------------------------------------------
    #   功能表：檔案(F)->新建(N)...
    # ----------------------------------------------
    markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "起點")

    fileNew1 = theSession.Parts.FileNew()

    theSession.SetUndoMarkName(markId1, "新建 對話方塊")

    markId2 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "新建")

    theSession.DeleteUndoMark(markId2, None)

    markId3 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "新建")

    fileNew1.TemplateFileName = "model-plain-1-mm-template.prt"

    fileNew1.UseBlankTemplate = False

    fileNew1.ApplicationName = "ModelTemplate"

    fileNew1.Units = NXOpen.Part.Units.Millimeters

    fileNew1.RelationType = ""

    fileNew1.UsesMasterModel = "No"

    fileNew1.TemplateType = NXOpen.FileNewTemplateType.Item

    fileNew1.TemplatePresentationName = "模型"

    fileNew1.ItemType = ""

    fileNew1.Specialization = ""

    fileNew1.SetCanCreateAltrep(False)

    fileNew1.NewFileName = "C:\\Program Files\\Siemens\\NX1872\\UGII\\model1.prt"

    fileNew1.MasterFileName = ""

    fileNew1.MakeDisplayedPart = True

    fileNew1.DisplayPartOption = NXOpen.DisplayPartOption.AllowAdditional

    # User Function call - UF_PART_ask_part_name

    nXObject1 = fileNew1.Commit()

    workPart = theSession.Parts.Work
    displayPart = theSession.Parts.Display
    theSession.DeleteUndoMark(markId3, None)

    fileNew1.Destroy()

    theSession.ApplicationSwitchImmediate("UG_APP_MODELING")

    # ----------------------------------------------
    #   功能表：插入(S)->草圖(H)...
    # ----------------------------------------------
    markId4 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "起點")

    sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(NXOpen.Sketch.Null)

    origin1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    normal1 = NXOpen.Vector3d(0.0, 0.0, 1.0)
    plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling)

    sketchInPlaceBuilder1.PlaneReference = plane1

    unit1 = workPart.UnitCollection.FindObject("MilliMeter")
    expression1 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    expression2 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(NXOpen.Sketch.Null)

    sketchAlongPathBuilder1.PlaneLocation.Expression.SetFormula("0")

    theSession.SetUndoMarkName(markId4, "建立草圖 對話方塊")

    markId5 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "建立草圖")

    theSession.DeleteUndoMark(markId5, None)

    markId6 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "建立草圖")

    theSession.Preferences.Sketch.CreateInferredConstraints = True

    theSession.Preferences.Sketch.ContinuousAutoDimensioning = True

    theSession.Preferences.Sketch.DimensionLabel = NXOpen.Preferences.SketchPreferences.DimensionLabelType.Expression

    theSession.Preferences.Sketch.TextSizeFixed = True

    theSession.Preferences.Sketch.FixedTextSize = 3.0

    theSession.Preferences.Sketch.DisplayParenthesesOnReferenceDimensions = True

    theSession.Preferences.Sketch.DisplayReferenceGeometry = False

    theSession.Preferences.Sketch.ConstraintSymbolSize = 3.0

    theSession.Preferences.Sketch.DisplayObjectColor = False

    theSession.Preferences.Sketch.DisplayObjectName = True

    nXObject2 = sketchInPlaceBuilder1.Commit()

    sketch1 = nXObject2
    feature1 = sketch1.Feature

    markId7 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "update")

    nErrs1 = theSession.UpdateManager.DoUpdate(markId7)

    sketch1.Activate(NXOpen.Sketch.ViewReorient.TrueValue)

    theSession.DeleteUndoMark(markId6, None)

    theSession.SetUndoMarkName(markId4, "建立草圖")

    sketchInPlaceBuilder1.Destroy()

    sketchAlongPathBuilder1.Destroy()

    try:
        # 運算式仍然在使用中。
        workPart.Expressions.Delete(expression2)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    try:
        # 運算式仍然在使用中。
        workPart.Expressions.Delete(expression1)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    plane1.DestroyPlane()

    # ----------------------------------------------
    #   功能表：插入(S)->草圖曲線(S)->矩形(R)...
    # ----------------------------------------------
    markId8 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Profile short list")

    markId9 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Create Rectangle")

    expression3 = workPart.Expressions.CreateSystemExpression("200")

    expression4 = workPart.Expressions.CreateSystemExpression("200")

    workPart.Expressions.Edit(expression3, "200")

    theSession.SetUndoMarkVisibility(markId9, "Create Rectangle", NXOpen.Session.MarkVisibility.Visible)

    # ----------------------------------------------
    # Creating rectangle using By 2 Points method 
    # ----------------------------------------------
    startPoint1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    endPoint1 = NXOpen.Point3d(200.0, 0.0, 0.0)
    line1 = workPart.Curves.CreateLine(startPoint1, endPoint1)

    startPoint2 = NXOpen.Point3d(200.0, 0.0, 0.0)
    endPoint2 = NXOpen.Point3d(200.0, 200.0, 0.0)
    line2 = workPart.Curves.CreateLine(startPoint2, endPoint2)

    startPoint3 = NXOpen.Point3d(200.0, 200.0, 0.0)
    endPoint3 = NXOpen.Point3d(0.0, 200.0, 0.0)
    line3 = workPart.Curves.CreateLine(startPoint3, endPoint3)

    startPoint4 = NXOpen.Point3d(0.0, 200.0, 0.0)
    endPoint4 = NXOpen.Point3d(0.0, 0.0, 0.0)
    line4 = workPart.Curves.CreateLine(startPoint4, endPoint4)

    theSession.ActiveSketch.AddGeometry(line1, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line2, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line3, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line4, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    geom1_1 = NXOpen.Sketch.ConstraintGeometry()

    geom1_1.Geometry = line1
    geom1_1.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_1.SplineDefiningPointIndex = 0
    geom2_1 = NXOpen.Sketch.ConstraintGeometry()

    geom2_1.Geometry = line2
    geom2_1.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_1.SplineDefiningPointIndex = 0
    sketchGeometricConstraint1 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_1, geom2_1)

    geom1_2 = NXOpen.Sketch.ConstraintGeometry()

    geom1_2.Geometry = line2
    geom1_2.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_2.SplineDefiningPointIndex = 0
    geom2_2 = NXOpen.Sketch.ConstraintGeometry()

    geom2_2.Geometry = line3
    geom2_2.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_2.SplineDefiningPointIndex = 0
    sketchGeometricConstraint2 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_2, geom2_2)

    geom1_3 = NXOpen.Sketch.ConstraintGeometry()

    geom1_3.Geometry = line3
    geom1_3.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_3.SplineDefiningPointIndex = 0
    geom2_3 = NXOpen.Sketch.ConstraintGeometry()

    geom2_3.Geometry = line4
    geom2_3.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_3.SplineDefiningPointIndex = 0
    sketchGeometricConstraint3 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_3, geom2_3)

    geom1_4 = NXOpen.Sketch.ConstraintGeometry()

    geom1_4.Geometry = line4
    geom1_4.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_4.SplineDefiningPointIndex = 0
    geom2_4 = NXOpen.Sketch.ConstraintGeometry()

    geom2_4.Geometry = line1
    geom2_4.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_4.SplineDefiningPointIndex = 0
    sketchGeometricConstraint4 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_4, geom2_4)

    geom1 = NXOpen.Sketch.ConstraintGeometry()

    geom1.Geometry = line1
    geom1.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    geom1.SplineDefiningPointIndex = 0
    sketchGeometricConstraint5 = theSession.ActiveSketch.CreateHorizontalConstraint(geom1)

    conGeom1_1 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_1.Geometry = line1
    conGeom1_1.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_1.SplineDefiningPointIndex = 0
    conGeom2_1 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_1.Geometry = line2
    conGeom2_1.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_1.SplineDefiningPointIndex = 0
    sketchGeometricConstraint6 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_1, conGeom2_1)

    conGeom1_2 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_2.Geometry = line2
    conGeom1_2.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_2.SplineDefiningPointIndex = 0
    conGeom2_2 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_2.Geometry = line3
    conGeom2_2.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_2.SplineDefiningPointIndex = 0
    sketchGeometricConstraint7 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_2, conGeom2_2)

    conGeom1_3 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_3.Geometry = line3
    conGeom1_3.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_3.SplineDefiningPointIndex = 0
    conGeom2_3 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_3.Geometry = line4
    conGeom2_3.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_3.SplineDefiningPointIndex = 0
    sketchGeometricConstraint8 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_3, conGeom2_3)

    conGeom1_4 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_4.Geometry = line4
    conGeom1_4.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_4.SplineDefiningPointIndex = 0
    conGeom2_4 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_4.Geometry = line1
    conGeom2_4.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_4.SplineDefiningPointIndex = 0
    sketchGeometricConstraint9 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_4, conGeom2_4)

    geom1_5 = NXOpen.Sketch.ConstraintGeometry()

    geom1_5.Geometry = line1
    geom1_5.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom1_5.SplineDefiningPointIndex = 0
    geom2_5 = NXOpen.Sketch.ConstraintGeometry()

    datumCsys1 = workPart.Features.FindObject("SKETCH(1:1B)")
    point1 = datumCsys1.FindObject("POINT 1")
    geom2_5.Geometry = point1
    geom2_5.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    geom2_5.SplineDefiningPointIndex = 0
    sketchGeometricConstraint10 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_5, geom2_5)

    dimObject1_1 = NXOpen.Sketch.DimensionGeometry()

    dimObject1_1.Geometry = line1
    dimObject1_1.AssocType = NXOpen.Sketch.AssocType.StartPoint
    dimObject1_1.AssocValue = 0
    dimObject1_1.HelpPoint.X = 0.0
    dimObject1_1.HelpPoint.Y = 0.0
    dimObject1_1.HelpPoint.Z = 0.0
    dimObject1_1.View = NXOpen.NXObject.Null
    dimObject2_1 = NXOpen.Sketch.DimensionGeometry()

    dimObject2_1.Geometry = line1
    dimObject2_1.AssocType = NXOpen.Sketch.AssocType.EndPoint
    dimObject2_1.AssocValue = 0
    dimObject2_1.HelpPoint.X = 0.0
    dimObject2_1.HelpPoint.Y = 0.0
    dimObject2_1.HelpPoint.Z = 0.0
    dimObject2_1.View = NXOpen.NXObject.Null
    dimOrigin1 = NXOpen.Point3d(100.0, -10.03422962062071, 0.0)
    sketchDimensionalConstraint1 = theSession.ActiveSketch.CreateDimension(NXOpen.Sketch.ConstraintType.ParallelDim, dimObject1_1, dimObject2_1, dimOrigin1, expression3, NXOpen.Sketch.DimensionOption.CreateAsDriving)

    sketchHelpedDimensionalConstraint1 = sketchDimensionalConstraint1
    dimension1 = sketchHelpedDimensionalConstraint1.AssociatedDimension

    dimObject1_2 = NXOpen.Sketch.DimensionGeometry()

    dimObject1_2.Geometry = line2
    dimObject1_2.AssocType = NXOpen.Sketch.AssocType.StartPoint
    dimObject1_2.AssocValue = 0
    dimObject1_2.HelpPoint.X = 0.0
    dimObject1_2.HelpPoint.Y = 0.0
    dimObject1_2.HelpPoint.Z = 0.0
    dimObject1_2.View = NXOpen.NXObject.Null
    dimObject2_2 = NXOpen.Sketch.DimensionGeometry()

    dimObject2_2.Geometry = line2
    dimObject2_2.AssocType = NXOpen.Sketch.AssocType.EndPoint
    dimObject2_2.AssocValue = 0
    dimObject2_2.HelpPoint.X = 0.0
    dimObject2_2.HelpPoint.Y = 0.0
    dimObject2_2.HelpPoint.Z = 0.0
    dimObject2_2.View = NXOpen.NXObject.Null
    dimOrigin2 = NXOpen.Point3d(210.03422962062072, 100.0, 0.0)
    sketchDimensionalConstraint2 = theSession.ActiveSketch.CreateDimension(NXOpen.Sketch.ConstraintType.ParallelDim, dimObject1_2, dimObject2_2, dimOrigin2, expression4, NXOpen.Sketch.DimensionOption.CreateAsDriving)

    sketchHelpedDimensionalConstraint2 = sketchDimensionalConstraint2
    dimension2 = sketchHelpedDimensionalConstraint2.AssociatedDimension

    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = False

    theSession.ActiveSketch.Update()

    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = True

    geoms1 = [NXOpen.SmartObject.Null] * 4 
    geoms1[0] = line1
    geoms1[1] = line2
    geoms1[2] = line3
    geoms1[3] = line4
    theSession.ActiveSketch.UpdateConstraintDisplay(geoms1)

    geoms2 = [NXOpen.SmartObject.Null] * 4 
    geoms2[0] = line1
    geoms2[1] = line2
    geoms2[2] = line3
    geoms2[3] = line4
    theSession.ActiveSketch.UpdateDimensionDisplay(geoms2)

    # ----------------------------------------------
    #   功能表：檔案(F)->完成草圖(K)
    # ----------------------------------------------
    sketch2 = theSession.ActiveSketch

    markId10 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Deactivate Sketch")

    theSession.ActiveSketch.Deactivate(NXOpen.Sketch.ViewReorient.TrueValue, NXOpen.Sketch.UpdateLevel.Model)

    # ----------------------------------------------
    #   功能表：插入(S)->設計特徵(E)->拉伸(X)...
    # ----------------------------------------------
    markId11 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "起點")

    extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)

    section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)

    extrudeBuilder1.Section = section1

    extrudeBuilder1.AllowSelfIntersectingSection(True)

    unit2 = extrudeBuilder1.Draft.FrontDraftAngle.Units

    expression5 = workPart.Expressions.CreateSystemExpressionWithUnits("2.00", unit2)

    extrudeBuilder1.DistanceTolerance = 0.01

    extrudeBuilder1.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create

    targetBodies1 = [NXOpen.Body.Null] * 1 
    targetBodies1[0] = NXOpen.Body.Null
    extrudeBuilder1.BooleanOperation.SetTargetBodies(targetBodies1)

    extrudeBuilder1.Limits.StartExtend.Value.SetFormula("0")

    extrudeBuilder1.Limits.EndExtend.Value.SetFormula("25")

    extrudeBuilder1.Offset.StartOffset.SetFormula("0")

    extrudeBuilder1.Offset.EndOffset.SetFormula("5")

    extrudeBuilder1.Limits.StartExtend.Value.SetFormula("0")

    extrudeBuilder1.Limits.EndExtend.Value.SetFormula("200")

    extrudeBuilder1.Draft.FrontDraftAngle.SetFormula("2")

    extrudeBuilder1.Draft.BackDraftAngle.SetFormula("2")

    extrudeBuilder1.Offset.StartOffset.SetFormula("0")

    extrudeBuilder1.Offset.EndOffset.SetFormula("5")

    smartVolumeProfileBuilder1 = extrudeBuilder1.SmartVolumeProfile

    smartVolumeProfileBuilder1.OpenProfileSmartVolumeOption = False

    smartVolumeProfileBuilder1.CloseProfileRule = NXOpen.GeometricUtilities.SmartVolumeProfileBuilder.CloseProfileRuleType.Fci

    theSession.SetUndoMarkName(markId11, "拉伸 對話方塊")

    section1.DistanceTolerance = 0.01

    section1.ChainingTolerance = 0.0094999999999999998

    section1.SetAllowedEntityTypes(NXOpen.Section.AllowTypes.OnlyCurves)

    markId12 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "section mark")

    markId13 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, None)

    features1 = [NXOpen.Features.Feature.Null] * 1 
    sketchFeature1 = feature1
    features1[0] = sketchFeature1
    curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1)

    section1.AllowSelfIntersection(True)

    rules1 = [None] * 1 
    rules1[0] = curveFeatureRule1
    helpPoint1 = NXOpen.Point3d(107.88381747426416, 7.1054273576010019e-15, 0.0)
    section1.AddToSection(rules1, line1, NXOpen.NXObject.Null, NXOpen.NXObject.Null, helpPoint1, NXOpen.Section.Mode.Create, False)

    theSession.DeleteUndoMark(markId13, None)

    direction1 = workPart.Directions.CreateDirection(sketch2, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)

    extrudeBuilder1.Direction = direction1

    expression6 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    theSession.DeleteUndoMark(markId12, None)

    markId14 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "拉伸")

    extrudeBuilder1.ParentFeatureInternal = False

    feature2 = extrudeBuilder1.CommitFeature()

    theSession.DeleteUndoMark(markId14, None)

    theSession.SetUndoMarkName(markId11, "拉伸")

    expression7 = extrudeBuilder1.Limits.StartExtend.Value
    expression8 = extrudeBuilder1.Limits.EndExtend.Value
    extrudeBuilder1.Destroy()

    workPart.Expressions.Delete(expression5)

    workPart.Expressions.Delete(expression6)

    markId15 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start")

    extrudeBuilder2 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)

    section2 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)

    extrudeBuilder2.Section = section2

    extrudeBuilder2.AllowSelfIntersectingSection(True)

    expression9 = workPart.Expressions.CreateSystemExpressionWithUnits("2.00", unit2)

    extrudeBuilder2.DistanceTolerance = 0.01

    extrudeBuilder2.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create

    targetBodies2 = [NXOpen.Body.Null] * 1 
    targetBodies2[0] = NXOpen.Body.Null
    extrudeBuilder2.BooleanOperation.SetTargetBodies(targetBodies2)

    extrudeBuilder2.Limits.StartExtend.Value.SetFormula("0")

    extrudeBuilder2.Limits.EndExtend.Value.SetFormula("200")

    extrudeBuilder2.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create

    targetBodies3 = [NXOpen.Body.Null] * 1 
    targetBodies3[0] = NXOpen.Body.Null
    extrudeBuilder2.BooleanOperation.SetTargetBodies(targetBodies3)

    extrudeBuilder2.Draft.FrontDraftAngle.SetFormula("2")

    extrudeBuilder2.Draft.BackDraftAngle.SetFormula("2")

    extrudeBuilder2.Offset.StartOffset.SetFormula("0")

    extrudeBuilder2.Offset.EndOffset.SetFormula("5")

    smartVolumeProfileBuilder2 = extrudeBuilder2.SmartVolumeProfile

    smartVolumeProfileBuilder2.OpenProfileSmartVolumeOption = False

    smartVolumeProfileBuilder2.CloseProfileRule = NXOpen.GeometricUtilities.SmartVolumeProfileBuilder.CloseProfileRuleType.Fci

    theSession.SetUndoMarkName(markId15, "拉伸 對話方塊")

    section2.DistanceTolerance = 0.01

    section2.ChainingTolerance = 0.0094999999999999998

    # ----------------------------------------------
    #   對話開始 拉伸
    # ----------------------------------------------
    section2.SetAllowedEntityTypes(NXOpen.Section.AllowTypes.OnlyCurves)

    extrudeBuilder2.Destroy()

    section2.Destroy()

    workPart.Expressions.Delete(expression9)

    theSession.UndoToMark(markId15, None)

    theSession.DeleteUndoMark(markId15, None)

    rotMatrix1 = NXOpen.Matrix3x3()

    rotMatrix1.Xx = 0.68275907883006226
    rotMatrix1.Xy = 0.73003033141686136
    rotMatrix1.Xz = 0.029929174504362194
    rotMatrix1.Yx = -0.3343903649742746
    rotMatrix1.Yy = 0.27579202445977291
    rotMatrix1.Yz = 0.90117803072242697
    rotMatrix1.Zx = 0.64963306880691984
    rotMatrix1.Zy = -0.6252955097038263
    rotMatrix1.Zz = 0.43241461753360738
    translation1 = NXOpen.Point3d(-3.5894923229227231, 3.0070314317351858, 5.2491532194054074)
    workPart.ModelingViews.WorkView.SetRotationTranslationScale(rotMatrix1, translation1, 0.89692984317447444)

    # ----------------------------------------------
    #   功能表：適合視窗(F)
    # ----------------------------------------------
    workPart.ModelingViews.WorkView.Fit()

    # ----------------------------------------------
    #   功能表：工具(T)->動作記錄(J)->停止錄製(S)
    # ----------------------------------------------

if __name__ == '__main__':
    main()